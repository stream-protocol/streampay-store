"use strict";

var _cart = require("../../__mocks__/cart");

var _stripeBase = _interopRequireDefault(require("../stripe-base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fakeContainer = {};
describe("StripeBase", function () {
  describe("createPayment", function () {
    var result;
    var stripeBase = new _stripeBase["default"](fakeContainer, {
      api_key: "test"
    });
    beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              jest.clearAllMocks();

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    it("returns created stripe payment intent for cart with existing customer", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _cart$region;

      var cart, context;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              cart = _cart.carts.frCart;
              context = {
                cart: cart,
                amount: cart.total,
                currency_code: (_cart$region = cart.region) === null || _cart$region === void 0 ? void 0 : _cart$region.currency_code
              };
              Object.assign(context, cart);
              _context2.next = 5;
              return stripeBase.createPayment(context);

            case 5:
              result = _context2.sent;
              expect(result).toEqual({
                session_data: {
                  id: "pi_lebron",
                  customer: "cus_lebron",
                  description: undefined,
                  amount: 100
                },
                update_requests: {
                  customer_metadata: {
                    stripe_id: "cus_lebron"
                  }
                }
              });

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it("returns created stripe payment intent for cart with no customer", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var _cart$region2;

      var cart, context;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              cart = _cart.carts.frCart;
              context = {
                cart: cart,
                amount: cart.total,
                currency_code: (_cart$region2 = cart.region) === null || _cart$region2 === void 0 ? void 0 : _cart$region2.currency_code
              };
              Object.assign(context, cart);
              context.cart.context.payment_description = 'some description';
              _context3.next = 6;
              return stripeBase.createPayment(context);

            case 6:
              result = _context3.sent;
              expect(result).toEqual({
                session_data: {
                  id: "pi_lebron",
                  customer: "cus_lebron",
                  description: 'some description',
                  amount: 100
                },
                update_requests: {
                  customer_metadata: {
                    stripe_id: "cus_lebron"
                  }
                }
              });

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it("returns created stripe payment intent for cart with no customer and the options default description", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var _cart$region3;

      var localStripeProviderService, cart, context;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              localStripeProviderService = new _stripeBase["default"](fakeContainer, {
                api_key: "test",
                payment_description: "test options description"
              });
              cart = _cart.carts.frCart;
              context = {
                cart: cart,
                amount: cart.total,
                currency_code: (_cart$region3 = cart.region) === null || _cart$region3 === void 0 ? void 0 : _cart$region3.currency_code
              };
              Object.assign(context, cart);
              context.cart.context.payment_description = null;
              _context4.next = 7;
              return localStripeProviderService.createPayment(context);

            case 7:
              result = _context4.sent;
              expect(result).toEqual({
                session_data: {
                  id: "pi_lebron",
                  customer: "cus_lebron",
                  description: "test options description",
                  amount: 100
                },
                update_requests: {
                  customer_metadata: {
                    stripe_id: "cus_lebron"
                  }
                }
              });

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
  });
  describe("retrievePayment", function () {
    var result;
    beforeAll( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var stripeBase;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              jest.clearAllMocks();
              stripeBase = new _stripeBase["default"](fakeContainer, {
                api_key: "test"
              });
              _context5.next = 4;
              return stripeBase.retrievePayment({
                payment_method: {
                  data: {
                    id: "pi_lebron"
                  }
                }
              });

            case 4:
              result = _context5.sent;

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    it("returns stripe payment intent", function () {
      expect(result).toEqual({
        id: "pi_lebron",
        customer: "cus_lebron"
      });
    });
  });
  describe("updatePayment", function () {
    var result;
    beforeAll( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var stripeBase;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              jest.clearAllMocks();
              stripeBase = new _stripeBase["default"](fakeContainer, {
                api_key: "test"
              });
              _context6.next = 4;
              return stripeBase.updatePayment({
                id: "pi_lebron",
                amount: 800
              }, {
                total: 1000
              });

            case 4:
              result = _context6.sent;

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    it("returns updated stripe payment intent", function () {
      expect(result).toEqual({
        id: "pi_lebron",
        customer: "cus_lebron",
        amount: 1000
      });
    });
  });
  describe("updatePaymentIntentCustomer", function () {
    var result;
    beforeAll( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      var stripeBase;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              jest.clearAllMocks();
              stripeBase = new _stripeBase["default"](fakeContainer, {
                api_key: "test"
              });
              _context7.next = 4;
              return stripeBase.updatePaymentIntentCustomer("pi_lebron", "cus_lebron_2");

            case 4:
              result = _context7.sent;

            case 5:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
    it("returns update stripe payment intent", function () {
      expect(result).toEqual({
        id: "pi_lebron",
        customer: "cus_lebron_2",
        amount: 1000
      });
    });
  });
  describe("capturePayment", function () {
    var result;
    beforeAll( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      var stripeBase;
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              jest.clearAllMocks();
              stripeBase = new _stripeBase["default"](fakeContainer, {
                api_key: "test"
              });
              _context8.next = 4;
              return stripeBase.capturePayment({
                data: {
                  id: "pi_lebron",
                  customer: "cus_lebron",
                  amount: 1000
                }
              });

            case 4:
              result = _context8.sent;

            case 5:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    })));
    it("returns captured stripe payment intent", function () {
      expect(result).toEqual({
        id: "pi_lebron",
        customer: "cus_lebron",
        amount: 1000,
        status: "succeeded"
      });
    });
  });
  describe("refundPayment", function () {
    var result;
    beforeAll( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      var stripeBase;
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              jest.clearAllMocks();
              stripeBase = new _stripeBase["default"](fakeContainer, {
                api_key: "test"
              });
              _context9.next = 4;
              return stripeBase.refundPayment({
                data: {
                  id: "re_123",
                  payment_intent: "pi_lebron",
                  amount: 1000,
                  status: "succeeded"
                }
              }, 1000);

            case 4:
              result = _context9.sent;

            case 5:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    })));
    it("returns refunded stripe payment intent", function () {
      expect(result).toEqual({
        id: "re_123",
        payment_intent: "pi_lebron",
        amount: 1000,
        status: "succeeded"
      });
    });
  });
  describe("cancelPayment", function () {
    var result;
    beforeAll( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
      var stripeBase;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              jest.clearAllMocks();
              stripeBase = new _stripeBase["default"](fakeContainer, {
                api_key: "test"
              });
              _context10.next = 4;
              return stripeBase.cancelPayment({
                data: {
                  id: "pi_lebron",
                  customer: "cus_lebron",
                  status: "cancelled"
                }
              });

            case 4:
              result = _context10.sent;

            case 5:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    })));
    it("returns cancelled stripe payment intent", function () {
      expect(result).toEqual({
        id: "pi_lebron",
        customer: "cus_lebron",
        status: "cancelled"
      });
    });
  });
});