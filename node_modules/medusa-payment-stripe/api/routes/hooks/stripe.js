"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("@medusajs/medusa/dist/utils");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(req, res) {
    var signature, event, stripeProviderService, isPaymentCollection, handleCartPayments, _handleCartPayments, handlePaymentCollection, _handlePaymentCollection, paymentIntent, cartId, resourceId;

    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _handlePaymentCollection = function _handlePaymentCollect2() {
              _handlePaymentCollection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(event, req, res, id, paymentIntentId) {
                var _paycol$payments;

                var manager, paymentCollectionService, paycol, payment;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        manager = req.scope.resolve("manager");
                        paymentCollectionService = req.scope.resolve("paymentCollectionService");
                        _context5.next = 4;
                        return paymentCollectionService.retrieve(id, {
                          relations: ["payments"]
                        })["catch"](function () {
                          return undefined;
                        });

                      case 4:
                        paycol = _context5.sent;

                        if (!(paycol !== null && paycol !== void 0 && (_paycol$payments = paycol.payments) !== null && _paycol$payments !== void 0 && _paycol$payments.length)) {
                          _context5.next = 13;
                          break;
                        }

                        if (!(event.type === "payment_intent.succeeded")) {
                          _context5.next = 13;
                          break;
                        }

                        payment = paycol.payments.find(function (pay) {
                          return pay.data.id === paymentIntentId;
                        });

                        if (!(payment && !payment.captured_at)) {
                          _context5.next = 11;
                          break;
                        }

                        _context5.next = 11;
                        return manager.transaction( /*#__PURE__*/function () {
                          var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(manager) {
                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                              while (1) {
                                switch (_context4.prev = _context4.next) {
                                  case 0:
                                    _context4.next = 2;
                                    return paymentCollectionService.withTransaction(manager).capture(payment.id);

                                  case 2:
                                  case "end":
                                    return _context4.stop();
                                }
                              }
                            }, _callee4);
                          }));

                          return function (_x14) {
                            return _ref4.apply(this, arguments);
                          };
                        }());

                      case 11:
                        res.sendStatus(200);
                        return _context5.abrupt("return");

                      case 13:
                        res.sendStatus(204);

                      case 14:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));
              return _handlePaymentCollection.apply(this, arguments);
            };

            handlePaymentCollection = function _handlePaymentCollect(_x7, _x8, _x9, _x10, _x11) {
              return _handlePaymentCollection.apply(this, arguments);
            };

            _handleCartPayments = function _handleCartPayments3() {
              _handleCartPayments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(event, req, res, cartId) {
                var manager, orderService, order, _err$detail, message, _err$detail2;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        manager = req.scope.resolve("manager");
                        orderService = req.scope.resolve("orderService");
                        _context3.next = 4;
                        return orderService.retrieveByCartId(cartId)["catch"](function () {
                          return undefined;
                        });

                      case 4:
                        order = _context3.sent;
                        _context3.t0 = event.type;
                        _context3.next = _context3.t0 === "payment_intent.succeeded" ? 8 : _context3.t0 === "payment_intent.amount_capturable_updated" ? 19 : 31;
                        break;

                      case 8:
                        if (!order) {
                          _context3.next = 17;
                          break;
                        }

                        if (!(order.payment_status !== "captured")) {
                          _context3.next = 14;
                          break;
                        }

                        _context3.next = 12;
                        return manager.transaction( /*#__PURE__*/function () {
                          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(manager) {
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return orderService.withTransaction(manager).capturePayment(order.id);

                                  case 2:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee);
                          }));

                          return function (_x12) {
                            return _ref2.apply(this, arguments);
                          };
                        }());

                      case 12:
                        _context3.next = 15;
                        break;

                      case 14:
                        return _context3.abrupt("return", res.sendStatus(200));

                      case 15:
                        _context3.next = 18;
                        break;

                      case 17:
                        return _context3.abrupt("return", res.sendStatus(404));

                      case 18:
                        return _context3.abrupt("break", 33);

                      case 19:
                        _context3.prev = 19;
                        _context3.next = 22;
                        return manager.transaction( /*#__PURE__*/function () {
                          var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(manager) {
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    _context2.next = 2;
                                    return paymentIntentAmountCapturableEventHandler({
                                      order: order,
                                      cartId: cartId,
                                      container: req.scope,
                                      transactionManager: manager
                                    });

                                  case 2:
                                  case "end":
                                    return _context2.stop();
                                }
                              }
                            }, _callee2);
                          }));

                          return function (_x13) {
                            return _ref3.apply(this, arguments);
                          };
                        }());

                      case 22:
                        _context3.next = 30;
                        break;

                      case 24:
                        _context3.prev = 24;
                        _context3.t1 = _context3["catch"](19);
                        message = "Stripe webhook ".concat(event, " handling failed\n").concat((_err$detail = _context3.t1 === null || _context3.t1 === void 0 ? void 0 : _context3.t1.detail) !== null && _err$detail !== void 0 ? _err$detail : _context3.t1 === null || _context3.t1 === void 0 ? void 0 : _context3.t1.message);

                        if ((_context3.t1 === null || _context3.t1 === void 0 ? void 0 : _context3.t1.code) === _utils.PostgresError.SERIALIZATION_FAILURE) {
                          message = "Stripe webhook ".concat(event, " handle failed. This can happen when this webhook is triggered during a cart completion and can be ignored. This event should be retried automatically.\n").concat((_err$detail2 = _context3.t1 === null || _context3.t1 === void 0 ? void 0 : _context3.t1.detail) !== null && _err$detail2 !== void 0 ? _err$detail2 : _context3.t1 === null || _context3.t1 === void 0 ? void 0 : _context3.t1.message);
                        }

                        this.logger_.warn(message);
                        return _context3.abrupt("return", res.sendStatus(409));

                      case 30:
                        return _context3.abrupt("break", 33);

                      case 31:
                        res.sendStatus(204);
                        return _context3.abrupt("return");

                      case 33:
                        res.sendStatus(200);

                      case 34:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this, [[19, 24]]);
              }));
              return _handleCartPayments.apply(this, arguments);
            };

            handleCartPayments = function _handleCartPayments2(_x3, _x4, _x5, _x6) {
              return _handleCartPayments.apply(this, arguments);
            };

            isPaymentCollection = function _isPaymentCollection(id) {
              return id && id.startsWith("paycol");
            };

            signature = req.headers["stripe-signature"];
            _context6.prev = 6;
            stripeProviderService = req.scope.resolve("pp_stripe");
            event = stripeProviderService.constructWebhookEvent(req.body, signature);
            _context6.next = 15;
            break;

          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](6);
            res.status(400).send("Webhook Error: ".concat(_context6.t0.message));
            return _context6.abrupt("return");

          case 15:
            paymentIntent = event.data.object;
            cartId = paymentIntent.metadata.cart_id; // Backward compatibility

            resourceId = paymentIntent.metadata.resource_id;

            if (!isPaymentCollection(resourceId)) {
              _context6.next = 23;
              break;
            }

            _context6.next = 21;
            return handlePaymentCollection(event, req, res, resourceId, paymentIntent.id);

          case 21:
            _context6.next = 25;
            break;

          case 23:
            _context6.next = 25;
            return handleCartPayments(event, req, res, cartId !== null && cartId !== void 0 ? cartId : resourceId);

          case 25:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[6, 11]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;

function paymentIntentAmountCapturableEventHandler(_x15) {
  return _paymentIntentAmountCapturableEventHandler.apply(this, arguments);
}

function _paymentIntentAmountCapturableEventHandler() {
  _paymentIntentAmountCapturableEventHandler = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(_ref5) {
    var order, cartId, container, transactionManager, cartService, orderService, cartServiceTx;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            order = _ref5.order, cartId = _ref5.cartId, container = _ref5.container, transactionManager = _ref5.transactionManager;

            if (order) {
              _context7.next = 11;
              break;
            }

            cartService = container.resolve("cartService");
            orderService = container.resolve("orderService");
            cartServiceTx = cartService.withTransaction(transactionManager);
            _context7.next = 7;
            return cartServiceTx.setPaymentSession(cartId, "stripe");

          case 7:
            _context7.next = 9;
            return cartServiceTx.authorizePayment(cartId);

          case 9:
            _context7.next = 11;
            return orderService.withTransaction(transactionManager).createFromCart(cartId);

          case 11:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _paymentIntentAmountCapturableEventHandler.apply(this, arguments);
}